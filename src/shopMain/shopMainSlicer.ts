import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import { fetchCount } from '../ccart/cartAPI';
import { fetchProducts } from './shopMainAPI';

export interface ProductState {
  products: Product[];
  status: 'idle' | 'loading' | 'failed';
}

export interface Product {
  id: number;
  name: string;
  price: number;
  image: any;
}

const initialState: ProductState = {
  products: [],
  status: 'idle',
};


export const fetchProductsAsync = createAsyncThunk(
  'shopMain/fetchProducts',
  async () => {
    const response = await fetchProducts();
    console.log(response.data);
    
    return response.data;
  }
);

export const shopMainSlice = createSlice({
  name: 'shopMain',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    .addCase(fetchProductsAsync.pending, (state) => {
      state.status = 'loading';
    })
    .addCase(fetchProductsAsync.fulfilled, (state, action) => {
      state.status = 'idle';
      state.products = action.payload;
      console.log('Fetched products:', state.products);
    })
    .addCase(fetchProductsAsync.rejected, (state) => {
      state.status = 'failed';
    });
  },
});

export const {  } = shopMainSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state: RootState) => state.shopMain.products;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default shopMainSlice.reducer;
